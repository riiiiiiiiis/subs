This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  auth/
    callback/
      route.ts
  actions.ts
  DashboardClient.tsx
  layout.tsx
  page.tsx
utils/
  supabase/
    client.ts
    server.ts
.env.local.example
.gitignore
CLAUDE.md
middleware.ts
next.config.js
package.json
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/auth/callback/route.ts">
import { createClient } from '@/utils/supabase/server'
import { NextResponse } from 'next/server'

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url)
  const code = searchParams.get('code')
  const next = searchParams.get('next') ?? '/'

  if (code) {
    const supabase = await createClient()
    const { error } = await supabase.auth.exchangeCodeForSession(code)
    if (!error) {
      return NextResponse.redirect(`${origin}${next}`)
    }
  }

  // Return the user to an error page with instructions
  return NextResponse.redirect(`${origin}/auth/auth-error`)
}
</file>

<file path="app/actions.ts">
'use server'

import { createClient } from '@/utils/supabase/server'
import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'
import { headers } from 'next/headers'

export type Subscription = {
  id: string
  title: string
  amount: number
  start_date: string
  period: number
  user_id: string
  created_at: string
}

export async function getSubscriptions(): Promise<Subscription[]> {
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()
  
  if (!user) {
    return []
  }

  const { data, error } = await supabase
    .from('subscriptions')
    .select('*')
    .order('created_at', { ascending: false })

  if (error) {
    console.error('Error fetching subscriptions:', error)
    return []
  }

  return data || []
}

export async function saveSubscription(formData: FormData) {
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()
  
  if (!user) {
    throw new Error('Not authenticated')
  }

  const title = formData.get('title') as string
  const amount = parseFloat(formData.get('amount') as string)
  const start_date = formData.get('startDate') as string
  const period = parseInt(formData.get('period') as string)
  const id = formData.get('id') as string

  // Basic validation
  if (!title || !amount || !start_date || !period) {
    throw new Error('All fields are required')
  }

  const subscriptionData = {
    title,
    amount,
    start_date,
    period,
    user_id: user.id,
  }

  if (id) {
    // Update existing subscription
    const { error } = await supabase
      .from('subscriptions')
      .update(subscriptionData)
      .eq('id', id)
      .eq('user_id', user.id) // Ensure user can only update their own subscriptions

    if (error) {
      console.error('Error updating subscription:', error)
      throw new Error('Failed to update subscription')
    }
  } else {
    // Create new subscription
    const { error } = await supabase
      .from('subscriptions')
      .insert(subscriptionData)

    if (error) {
      console.error('Error creating subscription:', error)
      throw new Error('Failed to create subscription')
    }
  }

  revalidatePath('/')
}

export async function deleteSubscription(id: string) {
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()
  
  if (!user) {
    throw new Error('Not authenticated')
  }

  const { error } = await supabase
    .from('subscriptions')
    .delete()
    .eq('id', id)
    .eq('user_id', user.id) // Ensure user can only delete their own subscriptions

  if (error) {
    console.error('Error deleting subscription:', error)
    throw new Error('Failed to delete subscription')
  }

  revalidatePath('/')
}

export async function signIn(formData: FormData) {
  const email = formData.get('email') as string
  const password = formData.get('password') as string
  const supabase = await createClient()

  const { error } = await supabase.auth.signInWithPassword({
    email,
    password,
  })

  if (error) {
    console.error('Sign in error:', error)
    return { error: 'Неверные учетные данные' }
  }

  revalidatePath('/', 'layout')
  redirect('/')
}

export async function signUp(formData: FormData) {
  const headersList = await headers()
  const origin = headersList.get('origin')
  const email = formData.get('email') as string
  const password = formData.get('password') as string
  const supabase = await createClient()

  const { error } = await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${origin}/auth/callback`,
    },
  })

  if (error) {
    console.error('Sign up error:', error)
    return { error: 'Не удалось зарегистрировать пользователя. Возможно, он уже существует.' }
  }

  return { message: 'Проверьте почту для подтверждения регистрации!' }
}

export async function signOut() {
  const supabase = await createClient()
  const { error } = await supabase.auth.signOut()
  
  if (error) {
    console.error('Error signing out:', error)
    throw new Error('Failed to sign out')
  }
  
  redirect('/')
}
</file>

<file path="app/DashboardClient.tsx">
'use client'

import { useState, useEffect, useMemo, useTransition } from 'react'
import { createClient } from '@/utils/supabase/client'
import { Chart as ChartJS, ArcElement, Tooltip, Legend, Title } from 'chart.js'
import { Pie } from 'react-chartjs-2'
import type { Subscription } from './actions'
import { signIn, signUp } from './actions'
import type { User } from '@supabase/supabase-js'

ChartJS.register(ArcElement, Tooltip, Legend, Title)

const EXCHANGE_RATE_USD_TO_RUB = 90.0

type Props = {
  user: User | null
  initialSubscriptions: Subscription[]
  saveSubscriptionAction: (formData: FormData) => Promise<void>
  deleteSubscriptionAction: (id: string) => Promise<void>
  signOutAction: () => Promise<void>
}

function AuthForm() {
  const [isSignUp, setIsSignUp] = useState(false)
  const [message, setMessage] = useState<{ type: 'error' | 'success', text: string } | null>(null)
  const [isPending, startTransition] = useTransition()
  const supabase = createClient()

  const handleSubmit = (formData: FormData) => {
    startTransition(async () => {
      setMessage(null)
      const action = isSignUp ? signUp : signIn
      const result = await action(formData)

      if (result) {
        if ('error' in result && result.error) {
          setMessage({ type: 'error', text: result.error })
        } else if ('message' in result && result.message) {
          setMessage({ type: 'success', text: result.message })
        }
      }
    })
  }

  const handleOAuth = async (provider: 'google' | 'github') => {
    await supabase.auth.signInWithOAuth({
      provider,
      options: { redirectTo: `${location.origin}/auth/callback` },
    })
  }

  return (
    <div className="border border-gray-200 rounded-lg p-6 bg-white shadow-sm max-w-sm mx-auto">
      <h2 className="text-xl font-semibold mb-4 text-center">
        {isSignUp ? 'Создать аккаунт' : 'Войти в систему'}
      </h2>

      <form action={handleSubmit} className="space-y-4 mb-4">
        <input
          name="email"
          type="email"
          placeholder="your@email.com"
          className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          required
          disabled={isPending}
        />
        <input
          name="password"
          type="password"
          placeholder="••••••••"
          className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          required
          minLength={6}
          disabled={isPending}
        />
        <button
          type="submit"
          disabled={isPending}
          className="w-full bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors"
        >
          {isPending ? 'Загрузка...' : (isSignUp ? 'Зарегистрироваться' : 'Войти')}
        </button>
      </form>
      
      {message && (
        <p className={`mb-4 text-center text-sm ${message.type === 'error' ? 'text-red-600' : 'text-green-600'}`}>
          {message.text}
        </p>
      )}
      
      <div className="text-center text-sm">
        <button 
          onClick={() => { setIsSignUp(!isSignUp); setMessage(null); }} 
          className="text-blue-600 hover:underline"
          disabled={isPending}
        >
          {isSignUp ? 'Уже есть аккаунт? Войти' : 'Нет аккаунта? Зарегистрироваться'}
        </button>
      </div>
      
      <div className="relative my-4">
        <div className="absolute inset-0 flex items-center">
          <div className="w-full border-t border-gray-300" />
        </div>
        <div className="relative flex justify-center text-sm">
          <span className="px-2 bg-white text-gray-500">или</span>
        </div>
      </div>

      <div className="space-y-2">
        <button 
          onClick={() => handleOAuth('google')} 
          disabled={isPending} 
          className="w-full flex items-center justify-center gap-2 bg-white border border-gray-300 text-gray-700 p-3 rounded-lg hover:bg-gray-50 disabled:opacity-50 transition-colors"
        >
          Войти через Google
        </button>
        <button 
          onClick={() => handleOAuth('github')} 
          disabled={isPending} 
          className="w-full flex items-center justify-center gap-2 bg-gray-800 text-white p-3 rounded-lg hover:bg-gray-900 disabled:opacity-50 transition-colors"
        >
          Войти через GitHub
        </button>
      </div>
    </div>
  )
}

export default function DashboardClient({
  user,
  initialSubscriptions,
  saveSubscriptionAction,
  deleteSubscriptionAction,
  signOutAction,
}: Props) {
  const supabase = createClient()
  const [subscriptions, setSubscriptions] = useState<Subscription[]>(initialSubscriptions)
  const [form, setForm] = useState<Partial<Subscription>>({
    start_date: new Date().toISOString().slice(0, 10),
    period: 30,
  })
  const [isClient, setIsClient] = useState(false)
  const [isPending, startTransition] = useTransition()
  const [, setUpdateTrigger] = useState(0)

  // Client-side mounting and realtime setup
  useEffect(() => {
    setIsClient(true)

    if (user) {
      // Set up realtime subscription
      const channel = supabase
        .channel('realtime-subscriptions')
        .on(
          'postgres_changes',
          {
            event: '*',
            schema: 'public',
            table: 'subscriptions',
            filter: `user_id=eq.${user.id}`,
          },
          (payload) => {
            if (payload.eventType === 'INSERT') {
              setSubscriptions(prev => [payload.new as Subscription, ...prev])
            } else if (payload.eventType === 'UPDATE') {
              setSubscriptions(prev => 
                prev.map(s => s.id === payload.new.id ? payload.new as Subscription : s)
              )
            } else if (payload.eventType === 'DELETE') {
              setSubscriptions(prev => prev.filter(s => s.id !== payload.old.id))
            }
          }
        )
        .subscribe()

      return () => {
        supabase.removeChannel(channel)
      }
    }
  }, [user, supabase])

  // Auto-update trigger for days remaining
  useEffect(() => {
    const interval = setInterval(() => {
      setUpdateTrigger(prev => prev + 1)
    }, 60000) // Update every minute

    return () => clearInterval(interval)
  }, [])

  if (!user) {
    return <AuthForm />
  }

  // Calculations
  const totalUsdCost = useMemo(() => {
    return subscriptions.reduce((sum, s) => sum + s.amount, 0)
  }, [subscriptions])

  const totalRubCost = useMemo(() => {
    return totalUsdCost * EXCHANGE_RATE_USD_TO_RUB
  }, [totalUsdCost])

  const chartDataForCurrentMonth = useMemo(() => {
    if (!isClient) {
      return { labels: [], datasets: [{ data: [] }] }
    }

    const now = new Date()
    const currentYear = now.getFullYear()
    const currentMonth = now.getMonth()
    const firstDayCurrentMonth = new Date(currentYear, currentMonth, 1)
    const firstDayNextMonth = new Date(currentYear, currentMonth + 1, 1)

    const currentMonthSubscriptions: { title: string; amount: number }[] = []

    subscriptions.forEach(s => {
      const startDate = new Date(s.start_date)
      let paymentDate = new Date(startDate)

      while (paymentDate.getTime() < firstDayNextMonth.getTime()) {
        if (paymentDate.getTime() >= firstDayCurrentMonth.getTime()) {
          currentMonthSubscriptions.push({ title: s.title, amount: s.amount })
          break
        }
        paymentDate.setDate(paymentDate.getDate() + s.period)
      }
    })

    const labels = currentMonthSubscriptions.map(sub => sub.title)
    const data = currentMonthSubscriptions.map(sub => sub.amount)

    const backgroundColor = [
      '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', 
      '#9966FF', '#FF9F40', '#FF6B6B', '#4ECDC4'
    ]

    return {
      labels,
      datasets: [{
        label: 'Расходы за текущий месяц (USD)',
        data,
        backgroundColor: backgroundColor.slice(0, data.length),
        borderColor: backgroundColor.slice(0, data.length).map(color => color + 'CC'),
        borderWidth: 1,
      }]
    }
  }, [subscriptions, isClient])

  const pieChartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top' as const,
      },
      title: {
        display: true,
        text: 'Расходы на подписки за текущий месяц (USD)',
      },
    },
  }

  const daysLeft = (s: Subscription) =>
    Math.ceil(
      (new Date(s.start_date).getTime() + s.period * 86_400_000 - Date.now()) /
        86_400_000,
    )

  const handleSave = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    
    const formData = new FormData(e.currentTarget)
    
    startTransition(async () => {
      try {
        await saveSubscriptionAction(formData)
        setForm({
          start_date: new Date().toISOString().slice(0, 10),
          period: 30,
        })
        e.currentTarget.reset()
      } catch (error) {
        console.error('Failed to save subscription:', error)
        alert('Ошибка при сохранении подписки')
      }
    })
  }

  const handleDelete = async (id: string) => {
    if (confirm('Удалить эту подписку?')) {
      startTransition(async () => {
        try {
          await deleteSubscriptionAction(id)
        } catch (error) {
          console.error('Failed to delete subscription:', error)
          alert('Ошибка при удалении подписки')
        }
      })
    }
  }

  const handleSignOut = async () => {
    startTransition(async () => {
      try {
        await signOutAction()
      } catch (error) {
        console.error('Failed to sign out:', error)
      }
    })
  }

  return (
    <div>
      {/* User info and sign out */}
      <div className="flex justify-between items-center mb-6 p-4 bg-gray-50 rounded-lg">
        <span className="text-sm text-gray-600">
          Добро пожаловать, <strong>{user.email}</strong>
        </span>
        <button
          onClick={handleSignOut}
          disabled={isPending}
          className="text-sm text-gray-600 hover:text-gray-800 hover:underline disabled:opacity-50"
        >
          Выйти
        </button>
      </div>

      {/* Total cost summary */}
      {subscriptions.length > 0 && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
          <h2 className="text-xl font-semibold mb-2 text-green-900">
            Общая стоимость подписок:
          </h2>
          <p className="text-lg text-green-800">USD: ${totalUsdCost.toFixed(2)}</p>
          <p className="text-lg text-green-800">
            RUB: {totalRubCost.toFixed(2)} ₽ (по курсу {EXCHANGE_RATE_USD_TO_RUB} USD/RUB)
          </p>
        </div>
      )}

      {/* Chart */}
      {isClient && chartDataForCurrentMonth.datasets[0].data.length > 0 && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <h2 className="text-xl font-semibold mb-2 text-blue-900">
            Распределение расходов за текущий месяц:
          </h2>
          <div className="w-full max-w-md mx-auto">
            <Pie options={pieChartOptions} data={chartDataForCurrentMonth} />
          </div>
        </div>
      )}

      {/* Add/Edit form */}
      <form onSubmit={handleSave} className="space-y-4 mb-6 border border-gray-200 rounded-lg p-4 bg-white">
        <h3 className="text-lg font-semibold">
          {form.id ? 'Редактировать подписку' : 'Добавить новую подписку'}
        </h3>
        
        {form.id && <input type="hidden" name="id" value={form.id} />}
        
        <input
          name="title"
          type="text"
          placeholder="Название подписки"
          className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          defaultValue={form.title || ''}
          required
          disabled={isPending}
        />
        
        <input
          name="amount"
          type="number"
          step="0.01"
          placeholder="Сумма (USD)"
          className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          defaultValue={form.amount || ''}
          required
          disabled={isPending}
        />
        
        <input
          name="startDate"
          type="date"
          className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          defaultValue={form.start_date || new Date().toISOString().slice(0, 10)}
          required
          disabled={isPending}
        />
        
        <input
          name="period"
          type="number"
          placeholder="Период в днях"
          className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          defaultValue={form.period || 30}
          required
          disabled={isPending}
        />
        
        <div className="flex gap-2">
          <button
            type="submit"
            disabled={isPending}
            className="flex-1 bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {isPending ? 'Сохраняем...' : (form.id ? 'Обновить' : 'Добавить')}
          </button>
          
          {form.id && (
            <button
              type="button"
              onClick={() => setForm({
                start_date: new Date().toISOString().slice(0, 10),
                period: 30,
              })}
              disabled={isPending}
              className="px-4 py-3 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50"
            >
              Отмена
            </button>
          )}
        </div>
      </form>

      {/* Subscriptions table */}
      <div className="border border-gray-200 rounded-lg overflow-hidden">
        <table className="w-full">
          <thead>
            <tr className="bg-gray-100">
              <th className="p-3 text-left font-semibold">Название</th>
              <th className="p-3 text-left font-semibold">Сумма</th>
              <th className="p-3 text-left font-semibold">Дней до оплаты</th>
              <th className="p-3 text-left font-semibold">Действия</th>
            </tr>
          </thead>
          <tbody>
            {subscriptions.length === 0 ? (
              <tr>
                <td colSpan={4} className="p-6 text-center text-gray-500">
                  Нет подписок. Добавьте первую подписку выше.
                </td>
              </tr>
            ) : (
              subscriptions.map(s => (
                <tr
                  key={s.id}
                  className="border-t border-gray-200 hover:bg-gray-50 cursor-pointer"
                  onClick={() => setForm({
                    ...s,
                    start_date: s.start_date.split('T')[0], // Ensure date format
                  })}
                >
                  <td className="p-3">{s.title}</td>
                  <td className="p-3">${s.amount.toFixed(2)}</td>
                  <td className="p-3">
                    <span className={daysLeft(s) <= 7 ? 'text-red-600 font-semibold' : ''}>
                      {daysLeft(s)}
                    </span>
                  </td>
                  <td className="p-3">
                    <button
                      onClick={(e) => {
                        e.stopPropagation()
                        handleDelete(s.id)
                      }}
                      disabled={isPending}
                      className="text-red-600 hover:text-red-800 disabled:opacity-50 text-sm"
                    >
                      Удалить
                    </button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  )
}
</file>

<file path="utils/supabase/client.ts">
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
</file>

<file path="utils/supabase/server.ts">
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
</file>

<file path=".env.local.example">
NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
</file>

<file path="middleware.ts">
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
          response = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            response.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  // IMPORTANT: You *must* call getUser() to refresh the session
  const {
    data: { user },
  } = await supabase.auth.getUser()

  return response
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
</file>

<file path="app/layout.tsx">
export const metadata = {
  title: 'Подписки',
  description: 'Управление подписками',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="ru">
      <head>
        <script src="https://cdn.tailwindcss.com"></script>
      </head>
      <body>{children}</body>
    </html>
  )
}
</file>

<file path=".gitignore">
# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

repomix-output.xml
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

This is a Next.js subscription management application (MVP) that allows users to track recurring subscriptions with automatic calculation of remaining days until next payment. The app uses browser localStorage for data persistence.

## Development Commands

```bash
npm install      # Install dependencies
npm run dev      # Start development server (http://localhost:3000)
npm run build    # Build for production
npm start        # Start production server
```

## Architecture

### Data Flow
1. **useLocalSubscriptions hook** (app/useLocalSubscriptions.ts) manages subscription data in localStorage
2. **Page component** (app/page.tsx) handles UI state and CRUD operations
3. All data is stored client-side in localStorage under the key "subscriptions"

### Key Components
- **app/page.tsx**: Main subscription management interface
  - Form for adding/editing subscriptions
  - Table displaying all subscriptions with calculated days remaining
  - Auto-refresh every minute to update "days remaining"
  - Click-to-edit functionality on table rows

- **app/useLocalSubscriptions.ts**: Custom hook for localStorage persistence
  - Provides `subs` state and `setSubs` function
  - Automatically syncs changes to localStorage

### Data Model
```typescript
type Subscription = {
  id: number;
  title: string;
  amount: number;
  startDate: string;
  period: number; // in days
}
```

## Important Notes

- The application is entirely client-side with no backend
- Tailwind CSS is loaded via CDN in app/layout.tsx
- UI text is in Russian
- Designed for deployment on Vercel
- Days remaining calculation: Math.max(0, period - daysSinceStart)
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {}

module.exports = nextConfig
</file>

<file path="README.md">
# Подписки - MVP

## Установка и запуск

1. Установите зависимости:
```bash
npm install
```

2. Запустите проект в режиме разработки:
```bash
npm run dev
```

3. Откройте браузер по адресу: http://localhost:3000

## Функциональность

- Добавление подписок с названием, суммой, датой начала и периодом
- Сохранение данных в localStorage
- Автоматическое обновление счетчика "осталось дней" каждую минуту
- Редактирование подписок по клику на строку в таблице

## Деплой на Vercel

1. Push проект в GitHub
2. Импортируйте проект на Vercel
3. Deploy без дополнительных настроек
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/page.tsx">
import { createClient } from '@/utils/supabase/server'
import { getSubscriptions, saveSubscription, signOut, deleteSubscription } from './actions'
import DashboardClient from './DashboardClient'

export default async function Page() {
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()

  const subscriptions = user ? await getSubscriptions() : []

  return (
    <main className="max-w-xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">📅 Подписки</h1>
      <DashboardClient 
        user={user} 
        initialSubscriptions={subscriptions}
        saveSubscriptionAction={saveSubscription}
        deleteSubscriptionAction={deleteSubscription}
        signOutAction={signOut}
      />
    </main>
  )
}
</file>

<file path="package.json">
{
  "name": "subscriptions",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.50.0",
    "chart.js": "^4.4.9",
    "next": "^15.3.3",
    "react": "^19.1.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.1.0"
  },
  "devDependencies": {
    "@types/node": "latest",
    "@types/react": "latest",
    "@types/react-dom": "latest",
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.4",
    "tailwindcss": "^4.1.8",
    "typescript": "latest"
  }
}
</file>

</files>
